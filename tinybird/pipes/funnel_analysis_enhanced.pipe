DESCRIPTION >
    Enhanced funnel analysis with reference-style filtering and unlimited steps.
    Supports regex patterns, event metadata, geographic/technology filters, and UTM tracking.
    Optimized for performance with single-pass array-based processing.

TOKEN "dashboard" READ

NODE endpoint
DESCRIPTION >
    Enhanced funnel analysis supporting up to 8 steps with comprehensive filtering - optimized version

SQL >
    %
    WITH 
    -- Unified events with efficient column selection
    all_events AS (
        SELECT 
            visitor_id,
            timestamp,
            path,
            '' as event_name,
            country_code,
            region,
            city,
            language,
            referrer_name,
            utm_source,
            utm_medium,
            utm_campaign,
            device,
            browser,
            os
        FROM analytics_page_views_detailed
        WHERE toDate(timestamp) >= {{ Date(date_from, '2024-01-01', description="Start date") }}
          AND toDate(timestamp) <= {{ Date(date_to, '2024-12-31', description="End date") }}
          {% if defined(site_id) %}
            AND site_id = {{ String(site_id, '', description="Site ID") }}
          {% end %}
        
        UNION ALL
        
        SELECT 
            visitor_id,
            timestamp,
            path,
            event_name,
            country_code,
            region,
            city,
            language,
            referrer_name,
            utm_source,
            utm_medium,
            utm_campaign,
            multiIf(desktop = 1, 'desktop', mobile = 1, 'mobile', 'unknown') as device,
            browser,
            os
        FROM analytics_custom_events
        WHERE toDate(timestamp) >= {{ Date(date_from, '2024-01-01') }}
          AND toDate(timestamp) <= {{ Date(date_to, '2024-12-31') }}
          {% if defined(site_id) %}
            AND site_id = {{ String(site_id, '', description="Site ID") }}
          {% end %}
    ),
    
    -- Single-pass step identification using enhanced multiIf
    events_with_steps AS (
        SELECT 
            visitor_id,
            timestamp,
            multiIf(
                -- Step 1 matching
                (
                    ({{ String(step1_path_exact, '') }} != '' AND path = {{ String(step1_path_exact, '') }}) OR
                    ({{ String(step1_path_pattern, '') }} != '' AND path LIKE {{ String(step1_path_pattern, '') }}) OR
                    ({{ String(step1_path_regex, '') }} != '' AND match(path, {{ String(step1_path_regex, '') }})) OR
                    ({{ String(step1_event_name, '') }} != '' AND event_name = {{ String(step1_event_name, '') }})
                ) AND (
                    ({{ String(step1_country, '') }} = '' OR country_code = {{ String(step1_country, '') }}) AND
                    ({{ String(step1_region, '') }} = '' OR region = {{ String(step1_region, '') }}) AND
                    ({{ String(step1_language, '') }} = '' OR language = {{ String(step1_language, '') }}) AND
                    ({{ String(step1_os, '') }} = '' OR os = {{ String(step1_os, '') }}) AND
                    ({{ String(step1_browser, '') }} = '' OR browser = {{ String(step1_browser, '') }}) AND
                    ({{ String(step1_platform, '') }} = '' OR device = {{ String(step1_platform, '') }}) AND
                    ({{ String(step1_utm_source, '') }} = '' OR utm_source = {{ String(step1_utm_source, '') }}) AND
                    ({{ String(step1_utm_medium, '') }} = '' OR utm_medium = {{ String(step1_utm_medium, '') }}) AND
                    ({{ String(step1_referrer_name, '') }} = '' OR referrer_name = {{ String(step1_referrer_name, '') }})
                ), 1,
                
                -- Step 2 matching (only if step 2 is defined)
                ({{ String(step2_path_exact, '') }} != '' OR {{ String(step2_path_pattern, '') }} != '' OR {{ String(step2_path_regex, '') }} != '' OR {{ String(step2_event_name, '') }} != '') AND
                (
                    ({{ String(step2_path_exact, '') }} != '' AND path = {{ String(step2_path_exact, '') }}) OR
                    ({{ String(step2_path_pattern, '') }} != '' AND path LIKE {{ String(step2_path_pattern, '') }}) OR
                    ({{ String(step2_path_regex, '') }} != '' AND match(path, {{ String(step2_path_regex, '') }})) OR
                    ({{ String(step2_event_name, '') }} != '' AND event_name = {{ String(step2_event_name, '') }})
                ) AND (
                    ({{ String(step2_country, '') }} = '' OR country_code = {{ String(step2_country, '') }}) AND
                    ({{ String(step2_os, '') }} = '' OR os = {{ String(step2_os, '') }}) AND
                    ({{ String(step2_browser, '') }} = '' OR browser = {{ String(step2_browser, '') }}) AND
                    ({{ String(step2_platform, '') }} = '' OR device = {{ String(step2_platform, '') }}) AND
                    ({{ String(step2_utm_source, '') }} = '' OR utm_source = {{ String(step2_utm_source, '') }})
                ), 2,
                
                -- Step 3 matching (only if step 3 is defined)
                ({{ String(step3_path_exact, '') }} != '' OR {{ String(step3_path_pattern, '') }} != '' OR {{ String(step3_path_regex, '') }} != '' OR {{ String(step3_event_name, '') }} != '') AND
                (
                    ({{ String(step3_path_exact, '') }} != '' AND path = {{ String(step3_path_exact, '') }}) OR
                    ({{ String(step3_path_pattern, '') }} != '' AND path LIKE {{ String(step3_path_pattern, '') }}) OR
                    ({{ String(step3_path_regex, '') }} != '' AND match(path, {{ String(step3_path_regex, '') }})) OR
                    ({{ String(step3_event_name, '') }} != '' AND event_name = {{ String(step3_event_name, '') }})
                ) AND (
                    ({{ String(step3_country, '') }} = '' OR country_code = {{ String(step3_country, '') }}) AND
                    ({{ String(step3_os, '') }} = '' OR os = {{ String(step3_os, '') }}) AND
                    ({{ String(step3_browser, '') }} = '' OR browser = {{ String(step3_browser, '') }}) AND
                    ({{ String(step3_platform, '') }} = '' OR device = {{ String(step3_platform, '') }}) AND
                    ({{ String(step3_utm_source, '') }} = '' OR utm_source = {{ String(step3_utm_source, '') }})
                ), 3,
                
                -- Step 4 matching (only if step 4 is defined)
                ({{ String(step4_path_exact, '') }} != '' OR {{ String(step4_path_pattern, '') }} != '' OR {{ String(step4_path_regex, '') }} != '' OR {{ String(step4_event_name, '') }} != '') AND
                (
                    ({{ String(step4_path_exact, '') }} != '' AND path = {{ String(step4_path_exact, '') }}) OR
                    ({{ String(step4_path_pattern, '') }} != '' AND path LIKE {{ String(step4_path_pattern, '') }}) OR
                    ({{ String(step4_path_regex, '') }} != '' AND match(path, {{ String(step4_path_regex, '') }})) OR
                    ({{ String(step4_event_name, '') }} != '' AND event_name = {{ String(step4_event_name, '') }})
                ) AND (
                    ({{ String(step4_country, '') }} = '' OR country_code = {{ String(step4_country, '') }}) AND
                    ({{ String(step4_os, '') }} = '' OR os = {{ String(step4_os, '') }}) AND
                    ({{ String(step4_browser, '') }} = '' OR browser = {{ String(step4_browser, '') }}) AND
                    ({{ String(step4_platform, '') }} = '' OR device = {{ String(step4_platform, '') }}) AND
                    ({{ String(step4_utm_source, '') }} = '' OR utm_source = {{ String(step4_utm_source, '') }})
                ), 4,
                
                0
            ) as step_num
        FROM all_events
        WHERE step_num > 0
        ORDER BY visitor_id, timestamp
    ),
    
    -- Visitor journey aggregation using arrays
    visitor_journeys AS (
        SELECT 
            visitor_id,
            groupArray(step_num) as steps,
            groupArray(timestamp) as timestamps
        FROM events_with_steps
        GROUP BY visitor_id
    ),
    
    -- Step progression analysis with array functions
    step_progression AS (
        SELECT 
            visitor_id,
            arrayFirstIndex(x -> x = 1, steps) as s1,
            arrayFirstIndex(x -> x = 2, steps) as s2,
            arrayFirstIndex(x -> x = 3, steps) as s3,
            arrayFirstIndex(x -> x = 4, steps) as s4
        FROM visitor_journeys
        WHERE arrayFirstIndex(x -> x = 1, steps) > 0
    ),
    
    -- Funnel metrics calculation
    funnel_metrics AS (
        SELECT 1 as step, count(*) as visitors FROM step_progression
        UNION ALL
        SELECT 2 as step, countIf(s1 > 0 AND s2 > 0 AND s2 > s1) as visitors FROM step_progression
        WHERE ({{ String(step2_path_exact, '') }} != '' OR {{ String(step2_path_pattern, '') }} != '' OR {{ String(step2_path_regex, '') }} != '' OR {{ String(step2_event_name, '') }} != '')
        UNION ALL  
        SELECT 3 as step, countIf(s1 > 0 AND s2 > 0 AND s3 > 0 AND s3 > s2 AND s2 > s1) as visitors FROM step_progression
        WHERE ({{ String(step3_path_exact, '') }} != '' OR {{ String(step3_path_pattern, '') }} != '' OR {{ String(step3_path_regex, '') }} != '' OR {{ String(step3_event_name, '') }} != '')
        UNION ALL
        SELECT 4 as step, countIf(s1 > 0 AND s2 > 0 AND s3 > 0 AND s4 > 0 AND s4 > s3 AND s3 > s2 AND s2 > s1) as visitors FROM step_progression
        WHERE ({{ String(step4_path_exact, '') }} != '' OR {{ String(step4_path_pattern, '') }} != '' OR {{ String(step4_path_regex, '') }} != '' OR {{ String(step4_event_name, '') }} != '')
    )
    
    -- Final funnel metrics with self-join for previous step data
    SELECT 
        f.step,
        f.visitors,
        CASE WHEN (SELECT visitors FROM funnel_metrics WHERE step = 1) > 0 
             THEN round(f.visitors / (SELECT visitors FROM funnel_metrics WHERE step = 1), 4) 
             ELSE 0 END as relative_visitors,
        COALESCE(prev.visitors, 0) as previous_visitors,
        CASE WHEN COALESCE(prev.visitors, 0) > 0 AND f.step > 1 
             THEN round(f.visitors / prev.visitors, 4) 
             ELSE 0 END as relative_previous_visitors,
        CASE WHEN f.step > 1 
             THEN COALESCE(prev.visitors, 0) - f.visitors 
             ELSE 0 END as dropped,
        CASE WHEN COALESCE(prev.visitors, 0) > 0 AND f.step > 1 
             THEN round(1 - (f.visitors / prev.visitors), 4) 
             ELSE 0 END as drop_off,
        CASE WHEN (SELECT visitors FROM funnel_metrics WHERE step = 1) > 0 
             THEN round(f.visitors / (SELECT visitors FROM funnel_metrics WHERE step = 1), 4) 
             ELSE 0 END as conversion_rate
    FROM funnel_metrics f
    LEFT JOIN funnel_metrics prev ON prev.step = f.step - 1
    WHERE f.visitors > 0 OR f.step = 1
    ORDER BY f.step

TYPE endpoint 